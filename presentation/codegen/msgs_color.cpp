// msgs_color.cpp              *DO NOT EDIT*               @generated -*-C++-*-

#include <bdes_ident.h>
BDES_IDENT_RCSID(msgs_color_cpp,"$Id$ $CSID$")

#include <msgs_color.h>

#include <bdeat_formattingmode.h>
#include <bdeat_valuetypefunctions.h>
#include <bdeu_print.h>
#include <bdeu_printmethods.h>
#include <bdeu_string.h>

#include <bdlb_print.h>
#include <bslim_printer.h>
#include <bsls_assert.h>

#include <bsl_iomanip.h>
#include <bsl_limits.h>
#include <bsl_ostream.h>

namespace BloombergLP {
namespace msgs {

                                // -----------
                                // class Color
                                // -----------

// CONSTANTS

const char Color::CLASS_NAME[] = "Color";

const bdeat_EnumeratorInfo Color::ENUMERATOR_INFO_ARRAY[] = {
    {
        Color::RED,
        "RED",
        sizeof("RED") - 1,
        ""
    },
    {
        Color::GREEN,
        "GREEN",
        sizeof("GREEN") - 1,
        ""
    },
    {
        Color::PURPLE,
        "PURPLE",
        sizeof("PURPLE") - 1,
        ""
    }
};

// CLASS METHODS

int Color::fromInt(Color::Value *result, int number)
{
    switch (number) {
      case Color::RED:
      case Color::GREEN:
      case Color::PURPLE:
        *result = (Color::Value)number;
        return 0;
      default:
        return -1;
    }
}

int Color::fromString(
        Color::Value *result,
        const char         *string,
        int                 stringLength)
{
    for (int i = 0; i < 3; ++i) {
        const bdeat_EnumeratorInfo& enumeratorInfo =
                    Color::ENUMERATOR_INFO_ARRAY[i];

        if (stringLength == enumeratorInfo.d_nameLength
        &&  0 == bsl::memcmp(enumeratorInfo.d_name_p, string, stringLength))
        {
            *result = (Color::Value)enumeratorInfo.d_value;
            return 0;
        }
    }

    return -1;
}

const char *Color::toString(Color::Value value)
{
    switch (value) {
      case RED: {
        return "RED";
      } break;
      case GREEN: {
        return "GREEN";
      } break;
      case PURPLE: {
        return "PURPLE";
      } break;
    }

    BSLS_ASSERT(!"invalid enumerator");
    return 0;
}

}  // close package namespace
}  // close enterprise namespace

// GENERATED BY BLP_BAS_CODEGEN_3.8.26 Fri Oct 13 21:30:53 2017
// USING bas_codegen.pl --mode msg --msgExpand --noAggregateConversion --noExternalization --package msgs generated.xsd
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., 2017
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------ END-OF-FILE ---------------------------------
